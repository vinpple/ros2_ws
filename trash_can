#include "rclcpp/rclcpp.hpp"
#include "geometry_msgs/msg/vector3.hpp"  // Vector3 메시지 타입을 포함
#include <memory>
#include <iostream>  // 키보드 입력을 위한 헤더

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<rclcpp::Node>("node_pub1_2");

    auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));

    // std_msgs::msg::String 대신 geometry_msgs::msg::Vector3 사용
    auto mypub = node->create_publisher<geometry_msgs::msg::Vector3>("topic_pub1_2", qos_profile);
    
    // 메시지 초기화 (Vector3 타입 사용)
    geometry_msgs::msg::Vector3 message;

    // 사용자로부터 실수 입력 받기
    std::cout << "Enter the x, y, z values for the Vector3 (separated by spaces): ";
    std::cin >> message.x >> message.y >> message.z;

    rclcpp::WallRate loop_rate(1.0);  // 반복 주파수 1Hz
    
    while (rclcpp::ok())
    {
        // 메시지 출력
        RCLCPP_INFO(node->get_logger(), "Publish: x=%f, y=%f, z=%f", message.x, message.y, message.z);

        // 메시지 퍼블리시
        mypub->publish(message);

        loop_rate.sleep();  // 반복주파수에 맞게 sleep
    }

    rclcpp::shutdown();
    return 0;
}



//CMakeLists.txt
cmake_minimum_required(VERSION 3.16)
project(pub1)

# Default to C++14
if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)

#build
add_executable(pub1 src/pub1.cpp)
ament_target_dependencies(pub1 rclcpp geometry_msgs)

# Install
install(TARGETS
  pub1
  DESTINATION lib/${PROJECT_NAME})
  
ament_package()

//linux@DESKTOP-MTHUGDP:~/ros2_ws$ colcon build --symlink-install --packages-select pub1
Starting >>> pub1    
--- stderr: pub1                         
CMake Error at /opt/ros/foxy/share/ament_cmake_target_dependencies/cmake/ament_target_dependencies.cmake:77 (message):
  ament_target_dependencies() the passed package name 'geometry_msgs' was not
  found before
Call Stack (most recent call first):
  CMakeLists.txt:20 (ament_target_dependencies)


make: *** [Makefile:222: cmake_check_build_system] Error 1
---
Failed   <<< pub1 [0.33s, exited with code 2]

Summary: 0 packages finished [0.47s]
  1 package failed: pub1
  1 package had stderr output: pub1



////////////////////////////////////////////
#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include <memory>

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);
    auto node = std::make_shared<rclcpp::Node>("node_sub1");

    auto sub = node->create_subscription<std_msgs::msg::String>(
        "topic_pub1",
        rclcpp::QoS(10),
        [node](const std_msgs::msg::String::SharedPtr msg) {
            RCLCPP_INFO(node->get_logger(), "Received: %s", msg->data.c_str());
        }
    );

    rclcpp::spin(node);
    rclcpp::shutdown();
    return 0;
}

#include "rclcpp/rclcpp.hpp"
#include "std_msgs/msg/string.hpp"
#include "rclcpp/time_source.hpp"
#include <memory>
#include <chrono>

using namespace std::chrono_literals;

class MinimalPublisher : public rclcpp::Node
{
public:
    MinimalPublisher()
    : Node("node_pub1")
    {
        auto qos_profile = rclcpp::QoS(rclcpp::KeepLast(10));
        mypub_ = this->create_publisher<std_msgs::msg::String>("topic_pub1", qos_profile);
        timer_ = this->create_wall_timer(
            100ms, std::bind(&MinimalPublisher::timer_callback, this));
    }

private:
    void timer_callback()
    {
        std_msgs::msg::String message;
        message.data = "Hello world!";
        RCLCPP_INFO(this->get_logger(), "Publish: %s", message.data.c_str());
        mypub_->publish(message);
    }

    rclcpp::Publisher<std_msgs::msg::String>::SharedPtr mypub_;
    rclcpp::TimerBase::SharedPtr timer_;
};

int main(int argc, char * argv[])
{
    rclcpp::init(argc, argv);
    rclcpp::spin(std::make_shared<MinimalPublisher>());
    rclcpp::shutdown();
    return 0;
}


cmake_minimum_required(VERSION 3.16)
project(psub1-1)

if(NOT CMAKE_CXX_STANDARD)
  set(CMAKE_CXX_STANDARD 14)
endif()

if(CMAKE_COMPILER_IS_GNUCXX OR CMAKE_CXX_COMPILER_ID MATCHES "Clang")
  add_compile_options(-Wall -Wextra -Wpedantic)
endif()

# find dependencies
find_package(ament_cmake REQUIRED)
find_package(rclcpp REQUIRED)
find_package(std_msgs REQUIRED)
#build
add_executable(pub src/pub.cpp)
ament_target_dependencies(pub rclcpp std_msgs)

add_executable(sub src/sub.cpp)
ament_target_dependencies(sub rclcpp std_msgs)

# Install
install(TARGETS
  pub
  sub
  DESTINATION lib/${PROJECT_NAME})

ament_package()
